{"version":3,"sources":["components/Markdown/renderers.tsx","hooks/useFetchFile.ts","components/Link/index.tsx","components/Markdown/index.tsx","pages/SingleItem/AsideWithScrollableImages.tsx","pages/AboutUs/index.tsx","components/Markdown/constants.ts"],"names":["HeadingRenderer","level","children","nodeText","node","text","visit","textNode","value","getTextFromMarkdownNode","id","toLowerCase","replace","HComp","getErrorMessage","filePath","res","statusText","Link","props","href","smooth","scroll","test","to","LinkScrollable","otherProps","el","yCoordinate","getBoundingClientRect","top","window","pageYOffset","scrollTo","behavior","MarkdownContent","renderers","heading","link","MarkdownRenderer","useSWR","fetch","then","a","ok","fileContent","catch","error","file","data","loading","isValidating","useFetchFile","loadText","AsideWithScrollableImagesContainer","styled","ItemContainer","ItemAsidePanel","ImageContainer","AutoColumn","theme","mediaWidth","upToMedium","AboutUsHeader","ItemHeader","upToSmall","AboutUsTextContainer","Row","AsideWithScrollableImages","header","markdown","image","itemColor","getThemeColours","ThemeModes","VAMPIRE","bg2","animation","black","fontSize","padding","fontWeight","MainImage","path","transformation","_buildMarkdownPath","subfolder","fileName","SUB_FOLDER","ABOUT_US_CONTENT","key","nanoid","AboutUs","Article","ScrollingContentPage","dataItem","IterableComponent","baseContentMessage","width"],"mappings":"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","file":"static/js/ABOUTUS.1d742bd3.chunk.js","sourcesContent":["import { ReactNode } from 'react'\nimport { Node as MarkdownNode } from 'unist'\nimport visit from 'unist-util-visit'\n\nconst constructId = (text: string): string => text.toLowerCase().replace(/\\W/g, '-')\n\nconst getTextFromMarkdownNode = (node: MarkdownNode): string => {\n  let text = ''\n  // get all text nodes\n  // for heading, most of the time there will be only one child text node\n  // but can be `## heading text <span>span text</span> **bold text**`\n  // =4 nodes (space is a text node)\n  visit(node, 'text', textNode => {\n    // TODO: fix this properly\n    text += (textNode as any).value || ''\n  })\n\n  return text\n}\ninterface HeadingProps {\n  level: number\n  children: ReactNode\n  node: MarkdownNode & { type: 'heading' }\n}\n\nexport function HeadingRenderer({ level, children, node }: HeadingProps): JSX.Element {\n  // traverse markdown syntax tree node\n  // and get text\n  const nodeText = getTextFromMarkdownNode(node)\n  const id = constructId(nodeText)\n\n  const HComp = ('h' + level) as keyof JSX.IntrinsicElements\n  return <HComp id={id}>{children}</HComp>\n}\n","import useSWR from 'swr'\n\nfunction getErrorMessage(filePath: string, res: Response): string {\n  return `Error fetching file ${filePath} - status: ${res.statusText}`\n}\n\nexport default function useFetchFile(filePath: string) {\n  const { data: file, isValidating, error } = useSWR(filePath, () =>\n    fetch(filePath)\n      .then(async res => {\n        if (res.ok) {\n          const fileContent = await res.text()\n          return fileContent\n        } else {\n          throw getErrorMessage(filePath, res)\n        }\n      })\n      .catch(error => {\n        throw error\n      })\n  )\n\n  return { file, loading: isValidating, error }\n}\n","import { HashLink } from 'react-router-hash-link'\nimport { ExternalLink } from 'theme/index'\n\nexport { ExternalLink } from 'theme/index'\nconst SCROLL_OFFSET = 24\n\nexport interface LinkRendererProps {\n  href: string\n  children: React.ReactNode\n  smooth?: boolean\n  scroll?: ((element: HTMLElement) => void) | undefined\n}\n\nexport function Link(props: LinkRendererProps) {\n  const { children, href = '#', smooth, scroll } = props\n  const isExternalLink = /^(https?:)?\\/\\//.test(href)\n  return isExternalLink ? (\n    <ExternalLink href={href}>{children}</ExternalLink>\n  ) : (\n    <HashLink smooth={smooth} to={href} scroll={scroll}>\n      {children}\n    </HashLink>\n  )\n}\n\nexport function LinkScrollable(props: LinkRendererProps): JSX.Element {\n  const { children, smooth = true, ...otherProps } = props\n\n  const scrollWithOffset = (el: HTMLElement) => {\n    const yCoordinate = el.getBoundingClientRect().top + window.pageYOffset\n    window.scrollTo({ top: yCoordinate - SCROLL_OFFSET, behavior: 'smooth' })\n  }\n\n  return (\n    <Link smooth={smooth} {...otherProps} scroll={scrollWithOffset}>\n      {children}\n    </Link>\n  )\n}\n","import ReactMarkdownHtml from 'react-markdown/with-html'\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown'\n\nimport { HeadingRenderer } from './renderers'\nimport useFetchFile from 'hooks/useFetchFile'\nimport { LinkScrollable, Link } from 'components/Link'\nimport { FixedAnimatedLoader } from 'components/Loader'\n\ninterface MarkdownParams {\n  filePath: string\n}\n\nexport function Markdown(props: { children?: string }) {\n  const { children = '' } = props\n  return <ReactMarkdown renderers={{ link: Link }}>{children}</ReactMarkdown>\n}\n\nconst MarkdownContent = (props: ReactMarkdownProps & { children: string }) => (\n  <ReactMarkdownHtml\n    {...props}\n    renderers={{ heading: HeadingRenderer, link: LinkScrollable }} /* allowDangerousHtml */\n  />\n)\n\nexport function MarkdownRenderer({ filePath }: MarkdownParams) {\n  const { error, loading, file } = useFetchFile(filePath)\n\n  if (loading) return <FixedAnimatedLoader loadText=\"PASTL\" />\n\n  return (\n    <>\n      {file && <MarkdownContent>{file}</MarkdownContent>}\n      {error && <MarkdownContent>{error}</MarkdownContent>}\n    </>\n  )\n}\n","import { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { AutoColumn, Row } from 'components/Layout'\nimport { MarkdownRenderer } from 'components/Markdown'\nimport { TYPE } from 'theme'\nimport { ThemeModes } from 'theme/styled'\nimport { getThemeColours } from 'theme/utils'\nimport { ItemContainer, ItemAsidePanel, ItemHeader } from './styleds'\nimport MainImage, { ImageKitTransformation } from 'components/MainImage'\n\nconst AsideWithScrollableImagesContainer = styled(ItemContainer)`\n  > ${ItemAsidePanel} {\n    width: 40vw;\n    max-width: 40vw;\n  }\n`\n\nconst ImageContainer = styled(AutoColumn)`\n  width: 100%;\n  overflow-y: auto;\n\n  > img {\n    height: 100vh;\n  }\n\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    display: none;\n  `}\n`\n\nconst AboutUsHeader = styled(ItemHeader)`\n  font-size: 70px;\n  white-space: nowrap;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    font-size: 45px;\n  `}\n`\n\nconst AboutUsTextContainer = styled(Row)`\n  padding: 0px 25px;\n`\n\ninterface Params {\n  header: ReactNode\n  markdown: string\n  image: { path: string; transformation?: ImageKitTransformation }\n  key: string\n}\n\nexport function AsideWithScrollableImages({ header, markdown, image }: Params) {\n  return (\n    <AsideWithScrollableImagesContainer id=\"#item-container\" /* isViewingItem={isViewingItem} */>\n      <ItemAsidePanel>\n        <AboutUsHeader itemColor={getThemeColours(ThemeModes.VAMPIRE).bg2} animation>\n          {header}\n        </AboutUsHeader>\n        <AboutUsTextContainer>\n          <TYPE.black fontSize={18} padding={2} fontWeight={300}>\n            <MarkdownRenderer filePath={markdown} />\n          </TYPE.black>\n        </AboutUsTextContainer>\n      </ItemAsidePanel>\n      <ImageContainer>\n        <MainImage path={image.path} transformation={image.transformation} />\n      </ImageContainer>\n    </AsideWithScrollableImagesContainer>\n  )\n}\n","import { nanoid } from '@reduxjs/toolkit'\n\nimport { BASE_MARKDOWN_PATH } from 'components/Markdown/constants'\nimport { AsideWithScrollableImages } from 'pages/SingleItem/AsideWithScrollableImages'\n\nimport { ScrollingContentPage } from 'components/ScrollingContentPage'\nimport { ArticleFadeInContainer } from 'components/Layout/Article'\n\n// assets\nconst david = 'david_Je_k19QVb.jpeg'\nconst felix_david = 'david_felix_tram_QHJOzTJi8.jpg'\nconst artists = 'artists-mathieu_sgnA_QA83.jpeg'\n\nfunction _buildMarkdownPath(subfolder: string, fileName: string) {\n  return BASE_MARKDOWN_PATH + subfolder + fileName\n}\nconst SUB_FOLDER = 'AboutUs/'\n\nconst ABOUT_US_CONTENT = [\n  // general about section\n  {\n    header: 'ABOUT US',\n    markdown: _buildMarkdownPath(SUB_FOLDER, 'AboutUs.md'),\n    image: { path: felix_david },\n    key: nanoid()\n  },\n  // pillars\n  {\n    header: 'PILLARS',\n    markdown: _buildMarkdownPath(SUB_FOLDER, 'Pillars.md'),\n    image: { path: david },\n    key: nanoid()\n  },\n  // artists\n  {\n    header: 'ARTISTS',\n    markdown: _buildMarkdownPath(SUB_FOLDER, 'Artists.md'),\n    image: { path: artists },\n    key: nanoid()\n  }\n]\n\nexport default function AboutUs() {\n  return (\n    <ArticleFadeInContainer id=\"ABOUTUS-ARTICLE\">\n      <ScrollingContentPage\n        data={ABOUT_US_CONTENT}\n        dataItem={ABOUT_US_CONTENT[0]}\n        IterableComponent={AsideWithScrollableImages}\n        baseContentMessage=\"MORE CONTENT\"\n        width={`60vw`}\n      />\n    </ArticleFadeInContainer>\n  )\n}\n","export const BASE_MARKDOWN_PATH = 'https://raw.githubusercontent.com/W3stside/pastelle/content/content/'\n"],"sourceRoot":""}