{"version":3,"sources":["hooks/useDetectScrollIntoView.ts","components/SmartImg/index.tsx","hooks/useEffectRef.ts","pages/Error/NotFound/index.tsx"],"names":["useDetectScrollIntoView","elem","options","useState","isInView","setIsInView","useEffect","observer","IntersectionObserver","isIntersecting","unobserve","observe","disconnect","DEFAULT_LQ_IP","quality","DEFAULT_TRANSFORMATIONS","pr","BASE_INTERSECTION_OPTIONS","threshold","ApiImage","path","transformation","loadInView","lazy","lq","forwardedRef","lqip","active","isFullUrl","RegExp","test","defaultRefValue","refToObserve","setRefToObserve","refToSet","useRef","useEffectRef","ref","conditionalCheck","current","undefined","root","container","document","src","loading","publicKey","process","urlEndpoint","transformationPosition","SmartImg","forwardRef","props","displayName","Container","styled","div","ButtonPrimary","theme","primaryText1","bg5","mediaWidth","upToSmall","NotFound","itemColor","as","Link","to"],"mappings":"4JAKe,SAASA,EACtBC,EACAC,GAEA,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAsBA,OApBAC,qBAAU,WACR,GAAKL,EAAL,CAEA,IAMMM,EAAW,IAAIC,sBAN4B,SAAC,EAAsCD,GAAa,oBACzFE,iBACRJ,GAAY,GACZE,EAASG,UAAUT,MAG+BC,GAMtD,OAHAK,EAASI,QAAQV,GAGV,WACLM,EAASK,iBAEV,CAACX,EAAMC,IAEHE,I,gGCfHS,EAAgB,CACpBC,QAAS,IAGLC,EAA0B,CAAC,CAAEC,IAAI,IACjCC,EAA4B,CAChCC,UAAW,IAEb,SAASC,EAAT,GAAgH,IAA5FC,EAA2F,EAA3FA,KAA2F,IAArFC,sBAAqF,MAApE,GAAoE,EAAhEC,EAAgE,EAAhEA,WAAgE,IAApDC,YAAoD,aAAvCC,UAAuC,SAA5BC,EAA4B,EAA5BA,aAC3EC,EAAI,2BACLb,GADK,IAERc,OAAQH,IAIJI,EAAY,IAAIC,OAAO,YAAYC,KAAKV,GAG9C,EChCa,SAAyBW,GACtC,MAAwC5B,qBAAxC,mBAAO6B,EAAP,KAAqBC,EAArB,KACMC,EAAWC,iBAAUJ,GAK3B,OAJAzB,qBAAU,WACR2B,EAAgBC,KACf,IAEI,CAACA,EAAUF,GDyBMI,CAA8B,MAAtD,mBAAOF,EAAP,KAAiBG,EAAjB,KACMjC,EAAWJ,YAAyB,OAACsB,QAAD,IAACA,KAAYgB,iBAAd,OAAiCD,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAKE,aAAUC,EAAjD,YAAC,eACpCvB,GADmC,IAEtCwB,MAAgB,OAAVnB,QAAU,IAAVA,OAAA,EAAAA,EAAYoB,YAAaC,YAGjC,OAAQf,EAkBN,qCAEE,sBAAMS,IAAKH,IACX,qBAAKU,IAAKxC,EAAWgB,OAAOoB,EAAWK,QAAQ,OAAOR,IAAKZ,OApB7D,eAAC,YAAD,CACEqB,UAAWC,qCACXC,YAAaD,kCACbE,uBAAuB,OAHzB,UAOE,sBAAMZ,IAAKH,IACX,cAAC,UAAD,CACEd,KAAMhB,EAAWgB,OAAOoB,EACxBK,QAAStB,EAAO,OAAS,QACzBG,KAAMA,EACNL,eAAc,UAAMN,EAAN,YAAkCM,IAChDgB,IAAKZ,OAWb,IAAMyB,EAAWC,sBAAW,SAACC,EAAmBf,GAApB,OAA4B,cAAClB,EAAD,2BAAciC,GAAd,IAAqB3B,aAAcY,QAE3Fa,EAASG,YAAc,WAERH,O,+IE7DTI,EAAYC,UAAOC,IAAV,wCAAGD,CAAH,0LAKXE,KAGS,qBAAGC,MAAkBC,gBAE1B,qBAAGD,MAAkBE,OAUzB,qBAAGF,MAAkBG,WAAWC,UAA/B,IAAD,4IAWW,SAASC,IACtB,OACE,kCACE,eAACT,EAAD,WACE,cAAC,IAAD,CAAYU,UAAU,OAAtB,6BACA,cAAC,IAAD,CAAU5C,KAtCK,kEAuCf,+EACA,cAAC,IAAD,CAAe6C,GAAIC,IAAMC,GAAI,IAA7B","file":"static/js/NOTFOUND.a26ec92a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nexport type LoadInView = {\n  container: Document | Element\n  conditionalCheck?: boolean\n}\nexport default function useDetectScrollIntoView(\n  elem: HTMLElement | null | undefined,\n  options: IntersectionObserverInit | undefined\n) {\n  const [isInView, setIsInView] = useState(false)\n\n  useEffect(() => {\n    if (!elem) return\n\n    const observerCb: IntersectionObserverCallback = ([entry]: IntersectionObserverEntry[], observer) => {\n      if (entry.isIntersecting) {\n        setIsInView(true)\n        observer.unobserve(elem)\n      }\n    }\n    const observer = new IntersectionObserver(observerCb, options)\n\n    // start observation of elem\n    observer.observe(elem)\n\n    // disconnect observer and close\n    return () => {\n      observer.disconnect()\n    }\n  }, [elem, options])\n\n  return isInView\n}\n","import { forwardRef } from 'react'\nimport { IKImage, IKContext } from 'imagekitio-react'\nimport useDetectScrollIntoView, { LoadInView } from 'hooks/useDetectScrollIntoView'\nimport useEffectRef from 'hooks/useEffectRef'\n\nexport type ImageKitTransformation = { [x: string]: number | string }[]\n\nexport interface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  path: string\n  lq?: boolean\n  lazy?: boolean\n  forwardedRef?: React.ForwardedRef<any>\n  transformation?: ImageKitTransformation\n  loadInView?: LoadInView\n}\n\nconst DEFAULT_LQ_IP = {\n  quality: 10\n}\n\nconst DEFAULT_TRANSFORMATIONS = [{ pr: true }]\nconst BASE_INTERSECTION_OPTIONS = {\n  threshold: 0.1\n}\nfunction ApiImage({ path, transformation = [], loadInView, lazy = true, lq = true, forwardedRef }: ImageProps) {\n  const lqip = {\n    ...DEFAULT_LQ_IP,\n    active: lq\n  }\n\n  // test that path is a full url vs an addon i.e for imagekit\n  const isFullUrl = new RegExp(/https?/gm).test(path)\n\n  // load if in view only!\n  const [refToSet, ref] = useEffectRef<HTMLSpanElement>(null)\n  const isInView = useDetectScrollIntoView(!!loadInView?.conditionalCheck ? ref?.current : undefined, {\n    ...BASE_INTERSECTION_OPTIONS,\n    root: loadInView?.container || document\n  })\n\n  return !isFullUrl ? (\n    <IKContext\n      publicKey={process.env.REACT_APP_IMAGEKIT_PUBLIC_KEY}\n      urlEndpoint={process.env.REACT_APP_IMAGEKIT_URL_ENDPOINT}\n      transformationPosition=\"path\"\n      // authenticationEndpoint=\"http://www.yourserver.com/auth\"\n    >\n      {/* Observable span to detect if in view */}\n      <span ref={refToSet} />\n      <IKImage\n        path={isInView ? path : undefined}\n        loading={lazy ? 'lazy' : 'eager'}\n        lqip={lqip}\n        transformation={[...DEFAULT_TRANSFORMATIONS, ...transformation]}\n        ref={forwardedRef}\n      />\n    </IKContext>\n  ) : (\n    <>\n      {/* Observable span to detect if in view */}\n      <span ref={refToSet} />\n      <img src={isInView ? path : undefined} loading=\"lazy\" ref={forwardedRef} />\n    </>\n  )\n}\nconst SmartImg = forwardRef((props: ImageProps, ref) => <ApiImage {...props} forwardedRef={ref} />)\n\nSmartImg.displayName = 'SmartImg'\n\nexport default SmartImg\n","import { useState, RefObject, useRef, useEffect } from 'react'\n\nexport default function useEffectRef<T>(defaultRefValue: any) {\n  const [refToObserve, setRefToObserve] = useState<RefObject<T>>()\n  const refToSet = useRef<T>(defaultRefValue)\n  useEffect(() => {\n    setRefToObserve(refToSet)\n  }, [])\n\n  return [refToSet, refToObserve]\n}\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport ButtonPrimary from 'components/Button'\nimport { ItemHeader } from 'pages/SingleItem/styleds'\nimport SmartImg from 'components/SmartImg'\n\nconst pastelle404IMG = '/APPAREL/2022/FALL/REBIRTH/IMAGES/front-large_Xp_n4aZ6fdS.png'\n\nconst Container = styled.div`\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  ${ButtonPrimary} {\n    width: 196px;\n    padding: 9px;\n    color: ${({ theme }) => theme.primaryText1};\n    &:hover {\n      ${({ theme }) => theme.bg5}\n    }\n  }\n  h2 {\n    margin: 36px 0 32px;\n  }\n  img {\n    margin-top: 20px;\n    max-width: 506px;\n  }\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    img {\n      max-width: 287px;\n    }\n    h2 {\n      font-size: 16px;\n      text-align: center;\n    }\n  `}\n`\n\nexport default function NotFound() {\n  return (\n    <article>\n      <Container>\n        <ItemHeader itemColor=\"#000\">PAGE NOT FOUND!</ItemHeader>\n        <SmartImg path={pastelle404IMG} />\n        <h2>The page you are looking for does not exist. </h2>\n        <ButtonPrimary as={Link} to={'/'}>\n          Back home\n        </ButtonPrimary>\n      </Container>\n    </article>\n  )\n}\n"],"sourceRoot":""}